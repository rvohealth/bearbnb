import { CalendarDate } from '@rvohealth/dream'
import { DateTime } from 'luxon'
import {
  ApplianceTypesEnum,
  ApplianceTypesEnumValues,
  BathOrShowerTypesEnum,
  BathOrShowerTypesEnumValues,
  BedTypesEnum,
  BedTypesEnumValues,
  IdType,
  LocalesEnum,
  LocalesEnumValues,
  LocalizedTypesEnum,
  LocalizedTypesEnumValues,
  PlaceStylesEnum,
  PlaceStylesEnumValues,
  RoomTypesEnum,
  RoomTypesEnumValues
} from './sync'

export const schema = {
  guests: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredWhereClauses: null,
      },
    },
  },
  host_places: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      hostId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      placeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      host: {
        type: 'BelongsTo',
        foreignKey: 'hostId',
        tables: ['hosts'],
        optional: false,
        requiredWhereClauses: null,
      },
      place: {
        type: 'BelongsTo',
        foreignKey: 'placeId',
        tables: ['places'],
        optional: false,
        requiredWhereClauses: null,
      },
    },
  },
  hosts: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      hostPlaces: {
        type: 'HasMany',
        foreignKey: 'hostId',
        tables: ['host_places'],
        optional: null,
        requiredWhereClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredWhereClauses: null,
      },
      places: {
        type: 'HasMany',
        foreignKey: null,
        tables: ['places'],
        optional: null,
        requiredWhereClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        tables: ['users'],
        optional: false,
        requiredWhereClauses: null,
      },
    },
  },
  localized_texts: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      locale: {
        coercedType: {} as LocalesEnum,
        enumType: {} as LocalesEnum,
        enumValues: LocalesEnumValues,
        dbType: 'locales_enum',
        allowNull: false,
        isArray: false,
      },
      localizableId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      localizableType: {
        coercedType: {} as LocalizedTypesEnum,
        enumType: {} as LocalizedTypesEnum,
        enumValues: LocalizedTypesEnumValues,
        dbType: 'localized_types_enum',
        allowNull: false,
        isArray: false,
      },
      markdown: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      title: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      localizable: {
        type: 'BelongsTo',
        foreignKey: 'localizableId',
        tables: ['hosts', 'places', 'rooms'],
        optional: false,
        requiredWhereClauses: null,
      },
    },
  },
  places: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: ['dream:SoftDelete'],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: false,
        isArray: false,
      },
      sleeps: {
        coercedType: {} as number,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      style: {
        coercedType: {} as PlaceStylesEnum,
        enumType: {} as PlaceStylesEnum,
        enumValues: PlaceStylesEnumValues,
        dbType: 'place_styles_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      hostPlaces: {
        type: 'HasMany',
        foreignKey: 'placeId',
        tables: ['host_places'],
        optional: null,
        requiredWhereClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredWhereClauses: null,
      },
      rooms: {
        type: 'HasMany',
        foreignKey: 'placeId',
        tables: ['rooms'],
        optional: null,
        requiredWhereClauses: null,
      },
    },
  },
  rooms: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: ['dream:STI', 'dream:SoftDelete'],
      named: [],
    },
    columns: {
      appliances: {
        coercedType: {} as ApplianceTypesEnum[],
        enumType: {} as ApplianceTypesEnum,
        enumValues: ApplianceTypesEnumValues,
        dbType: 'appliance_types_enum[]',
        allowNull: false,
        isArray: true,
      },
      bathOrShowerType: {
        coercedType: {} as BathOrShowerTypesEnum | null,
        enumType: {} as BathOrShowerTypesEnum,
        enumValues: BathOrShowerTypesEnumValues,
        dbType: 'bath_or_shower_types_enum',
        allowNull: true,
        isArray: false,
      },
      bedTypes: {
        coercedType: {} as BedTypesEnum[],
        enumType: {} as BedTypesEnum,
        enumValues: BedTypesEnumValues,
        dbType: 'bed_types_enum[]',
        allowNull: false,
        isArray: true,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      placeId: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as RoomTypesEnum,
        enumType: {} as RoomTypesEnum,
        enumValues: RoomTypesEnumValues,
        dbType: 'room_types_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        tables: ['localized_texts'],
        optional: null,
        requiredWhereClauses: null,
      },
      place: {
        type: 'BelongsTo',
        foreignKey: 'placeId',
        tables: ['places'],
        optional: false,
        requiredWhereClauses: null,
      },
    },
  },
  users: {
    primaryKey: 'id',
    createdAtField: 'createdAt',
    updatedAtField: 'updatedAt',
    deletedAtField: 'deletedAt',
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      email: {
        coercedType: {} as string,
        enumType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: false,
        isArray: false,
      },
      firstName: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as IdType,
        enumType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      lastName: {
        coercedType: {} as string | null,
        enumType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    encryptedColumns: [],
    associations: {
      
    },
  },
} as const

export const globalSchema = {
  passthroughColumns: [],
  allDefaultScopeNames: ['dream:STI', 'dream:SoftDelete'],
  globalNames: {
    models: {
      'Guest': 'guests',
      'Host': 'hosts',
      'HostPlace': 'host_places',
      'LocalizedText': 'localized_texts',
      'Place': 'places',
      'Room/Bathroom': 'rooms',
      'Room/Bedroom': 'rooms',
      'Room/Den': 'rooms',
      'Room/Kitchen': 'rooms',
      'Room/LivingRoom': 'rooms',
      'Room': 'rooms',
      'User': 'users'
    },
    serializers: [
      'GuestSerializer',
      'GuestSummarySerializer',
      'HostSerializer',
      'HostSummarySerializer',
      'LocalizedTextSerializer',
      'LocalizedTextSummarySerializer',
      'PlaceSerializer',
      'PlaceSummarySerializer',
      'Room/BathroomSerializer',
      'Room/BathroomSummarySerializer',
      'Room/BedroomSerializer',
      'Room/BedroomSummarySerializer',
      'Room/DenSerializer',
      'Room/DenSummarySerializer',
      'Room/KitchenSerializer',
      'Room/KitchenSummarySerializer',
      'Room/LivingRoomSerializer',
      'Room/LivingRoomSummarySerializer',
      'RoomSerializer',
      'RoomSummarySerializer'
    ],
  },
} as const
