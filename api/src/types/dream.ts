
/*

                                    ,▄█▄                 
    ]█▄▄                         ╓█████▌                 
    ▐██████▄                   ▄█████▓╣█                 
     ║████████▄,  ,  ,,▄,▄▄▄▓██████╬╬╣╣▌                 
      ╚███╣██████████▓▓▓▓██████████╩╠╬▓                  
       ╙█╬╬╬▓███████████████████████▒▓▌                  
        ╙▓█▓██████████████████████████                   
         ╚██████▀███████████╩█▓▌▐▓████▄                  
         '║█████`╣█Γ║████████▄▄φ▓█████▌                 
          ║█████████████████████▓█████▌                  
           █████████████▓▓████████████                   
           ║█████████████████████████                    
          ]█████████████████████████                     
         ,▓██████████████████████████                    
        ▓█████████████████████████████µ                  
       ▐███████████████████████████████▄▄                
       ║█████████████████████████████████╬╬╣▓            
   ,╔╦║███████████████████████████████████▓╬╬╣           
,≥≥⌠░░░╠▓████████████████████████████████████▓▓          
,;=-',▄█████████████████████████████████████████▓        
                                                         
                                                         
                                                         
  ██████╗ ███████╗██╗   ██╗ ██████╗██╗  ██╗██╗ ██████╗   
  ██╔══██╗██╔════╝╚██╗ ██╔╝██╔════╝██║  ██║██║██╔════╝   
  ██████╔╝███████╗ ╚████╔╝ ██║     ███████║██║██║        
  ██╔═══╝ ╚════██║  ╚██╔╝  ██║     ██╔══██║██║██║        
  ██║     ███████║   ██║   ╚██████╗██║  ██║██║╚██████╗   
  ╚═╝     ╚══════╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝ ╚═════╝   
                                                         
                                                         

This file was automatically generated by my cat, Aster.
He does not want you mucking about with his files,
and we are pretty lax on trimming his nails.

I mean, we have him pretty well fenced in but he is an
escape artist and he still manages to get fleas!

My point is, don't go mucking about with his files!

He actually has a hopefully well-tempered message for
us humans, he says:

"
  Dear pathetic humans,

  Here is a haiku to keep you in line

  don't dare go mucking
  with my files, I lyke them fine
  prettierignore
"

*/

import { type CalendarDate, type DateTime } from '@rvoh/dream'
import {
  ApplianceTypesEnum,
  ApplianceTypesEnumValues,
  BathOrShowerStylesEnum,
  BathOrShowerStylesEnumValues,
  BedTypesEnum,
  BedTypesEnumValues,
  LocalesEnum,
  LocalesEnumValues,
  LocalizedTypesEnum,
  LocalizedTypesEnumValues,
  PlaceStylesEnum,
  PlaceStylesEnumValues,
  RoomTypesEnum,
  RoomTypesEnumValues
} from './db.js'

export const schema = {
  guests: {
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'updatedAt', 'userId'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        foreignKeyTypeColumn: null,
        tables: ['users'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  host_places: {
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'hostId', 'id', 'placeId', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      hostId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      placeId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      host: {
        type: 'BelongsTo',
        foreignKey: 'hostId',
        foreignKeyTypeColumn: null,
        tables: ['hosts'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      place: {
        type: 'BelongsTo',
        foreignKey: 'placeId',
        foreignKeyTypeColumn: null,
        tables: ['places'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  hosts: {
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'id', 'updatedAt', 'userId'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      userId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      currentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: ['locale'],
      },
      hostPlaces: {
        type: 'HasMany',
        foreignKey: 'hostId',
        foreignKeyTypeColumn: null,
        tables: ['host_places'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      places: {
        type: 'HasMany',
        foreignKey: null,
        foreignKeyTypeColumn: null,
        tables: ['places'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      user: {
        type: 'BelongsTo',
        foreignKey: 'userId',
        foreignKeyTypeColumn: null,
        tables: ['users'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  localized_texts: {
    serializerKeys: ['default', 'summary'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'id', 'locale', 'localizableId', 'localizableType', 'markdown', 'title', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      locale: {
        coercedType: {} as LocalesEnum,
        enumType: {} as LocalesEnum,
        enumArrayType: [] as LocalesEnum[],
        enumValues: LocalesEnumValues,
        dbType: 'locales_enum',
        allowNull: false,
        isArray: false,
      },
      localizableId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      localizableType: {
        coercedType: {} as LocalizedTypesEnum,
        enumType: {} as LocalizedTypesEnum,
        enumArrayType: [] as LocalizedTypesEnum[],
        enumValues: LocalizedTypesEnumValues,
        dbType: 'localized_types_enum',
        allowNull: false,
        isArray: false,
      },
      markdown: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'text',
        allowNull: true,
        isArray: false,
      },
      title: {
        coercedType: {} as string | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'character varying',
        allowNull: true,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      localizable: {
        type: 'BelongsTo',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['hosts', 'places', 'rooms'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  places: {
    serializerKeys: ['default', 'forGuests', 'summary', 'summaryForGuests'],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'deletedAt', 'id', 'name', 'sleeps', 'style', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      name: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: false,
        isArray: false,
      },
      sleeps: {
        coercedType: {} as number,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: false,
        isArray: false,
      },
      style: {
        coercedType: {} as PlaceStylesEnum,
        enumType: {} as PlaceStylesEnum,
        enumArrayType: [] as PlaceStylesEnum[],
        enumValues: PlaceStylesEnumValues,
        dbType: 'place_styles_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      currentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: ['locale'],
      },
      hostPlaces: {
        type: 'HasMany',
        foreignKey: 'placeId',
        foreignKeyTypeColumn: null,
        tables: ['host_places'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      hosts: {
        type: 'HasMany',
        foreignKey: null,
        foreignKeyTypeColumn: null,
        tables: ['hosts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      rooms: {
        type: 'HasMany',
        foreignKey: 'placeId',
        foreignKeyTypeColumn: null,
        tables: ['rooms'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  rooms: {
    serializerKeys: ['default', 'forGuests', 'summary'],
    scopes: {
      default: ['dream:STI'],
      named: [],
    },
    nonJsonColumnNames: ['appliances', 'bathOrShowerStyle', 'bedTypes', 'createdAt', 'deletedAt', 'id', 'placeId', 'position', 'type', 'updatedAt'],
    columns: {
      appliances: {
        coercedType: {} as ApplianceTypesEnum[],
        enumType: {} as ApplianceTypesEnum,
        enumArrayType: [] as ApplianceTypesEnum[],
        enumValues: ApplianceTypesEnumValues,
        dbType: 'appliance_types_enum[]',
        allowNull: false,
        isArray: true,
      },
      bathOrShowerStyle: {
        coercedType: {} as BathOrShowerStylesEnum | null,
        enumType: {} as BathOrShowerStylesEnum,
        enumArrayType: [] as BathOrShowerStylesEnum[],
        enumValues: BathOrShowerStylesEnumValues,
        dbType: 'bath_or_shower_styles_enum',
        allowNull: true,
        isArray: false,
      },
      bedTypes: {
        coercedType: {} as BedTypesEnum[],
        enumType: {} as BedTypesEnum,
        enumArrayType: [] as BedTypesEnum[],
        enumValues: BedTypesEnumValues,
        dbType: 'bed_types_enum[]',
        allowNull: false,
        isArray: true,
      },
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      deletedAt: {
        coercedType: {} as DateTime | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: true,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      placeId: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      position: {
        coercedType: {} as number | null,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'integer',
        allowNull: true,
        isArray: false,
      },
      type: {
        coercedType: {} as RoomTypesEnum,
        enumType: {} as RoomTypesEnum,
        enumArrayType: [] as RoomTypesEnum[],
        enumValues: RoomTypesEnumValues,
        dbType: 'room_types_enum',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      currentLocalizedText: {
        type: 'HasOne',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: ['locale'],
      },
      localizedTexts: {
        type: 'HasMany',
        foreignKey: 'localizableId',
        foreignKeyTypeColumn: 'localizableType',
        tables: ['localized_texts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      place: {
        type: 'BelongsTo',
        foreignKey: 'placeId',
        foreignKeyTypeColumn: null,
        tables: ['places'],
        optional: false,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
  users: {
    serializerKeys: [],
    scopes: {
      default: [],
      named: [],
    },
    nonJsonColumnNames: ['createdAt', 'email', 'id', 'updatedAt'],
    columns: {
      createdAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
      email: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'citext',
        allowNull: false,
        isArray: false,
      },
      id: {
        coercedType: {} as string,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'bigint',
        allowNull: false,
        isArray: false,
      },
      updatedAt: {
        coercedType: {} as DateTime,
        enumType: null,
        enumArrayType: null,
        enumValues: null,
        dbType: 'timestamp without time zone',
        allowNull: false,
        isArray: false,
      },
    },
    virtualColumns: [],
    associations: {
      guest: {
        type: 'HasOne',
        foreignKey: 'userId',
        foreignKeyTypeColumn: null,
        tables: ['guests'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
      host: {
        type: 'HasOne',
        foreignKey: 'userId',
        foreignKeyTypeColumn: null,
        tables: ['hosts'],
        optional: null,
        requiredAndClauses: null,
        passthroughAndClauses: null,
      },
    },
  },
} as const

export const connectionTypeConfig = {
  passthroughColumns: ['locale'],
  allDefaultScopeNames: ['dream:STI'],
  globalNames: {
    models: {
      'Guest': 'guests',
      'Host': 'hosts',
      'HostPlace': 'host_places',
      'LocalizedText': 'localized_texts',
      'Place': 'places',
      'Room/Bathroom': 'rooms',
      'Room/Bedroom': 'rooms',
      'Room/Den': 'rooms',
      'Room/Kitchen': 'rooms',
      'Room/LivingRoom': 'rooms',
      'Room': 'rooms',
      'User': 'users'
    },
  },
} as const
